[["index.html", "3D’omics | Swine fibres trial Manuscript in prep Chapter 1 Introduction 1.1 Prepare the R environment", " 3D’omics | Swine fibres trial Manuscript in prep Antton Alberdi1 Last update: 2024-06-14 Chapter 1 Introduction This webbook contains all the code used for the study on the effect of probiotics on Salmonella infection in broiler chicken. 1.1 Prepare the R environment 1.1.1 Environment To reproduce all the analyses locally, clone this repository in your computer using: RStudio &gt; New Project &gt; Version Control &gt; Git And indicating the following git repository: https://github.com/3d-omics/AMAC001_fibre_trial.git Once the R project has been created, follow the instructions and code chunks shown in this webbook. 1.1.2 Libraries The following R packages are required for the data analysis. # Base library(R.utils) library(knitr) library(tidyverse) library(devtools) library(tinytable) library(broom) library(broom.mixed) # For tree handling library(ape) library(phyloseq) library(phytools) # For plotting library(ggplot2) library(ggrepel) library(ggpubr) library(ggnewscale) library(gridExtra) library(ggtreeExtra) library(ggtree) library(ggh4x) # For statistics library(spaa) library(vegan) library(Rtsne) library(geiger) library(hilldiv2) library(distillR) library(ANCOMBC) library(lme4) library(Hmsc) University of Copenhagen, antton.alberdi@sund.ku.dk↩︎ "],["data-preparation.html", "Chapter 2 Data preparation 2.1 Filter and normalise data 2.2 Color scheme 2.3 Wrap working objects", " Chapter 2 Data preparation 2.0.1 Sample metadata sample_metadata &lt;- read_csv(&quot;data/sample_metadata.csv&quot;) 2.0.2 Genome metadata Relevant metadata of genomes is fetched from 2-3 files and merged into one genome metadata object for downstream analyses. 2.0.2.1 Taxonomy This is the raw taxonomy table generated by GTDBtk, which is simplified for downstream analyses. genome_taxonomy &lt;- bind_rows(read_tsv(&quot;data/gtdbtk.bac120.summary.tsv&quot;, col_select=c(&quot;user_genome&quot;,&quot;classification&quot;)), read_tsv(&quot;data/gtdbtk.ar53.summary.tsv&quot;, , col_select=c(&quot;user_genome&quot;,&quot;classification&quot;))) %&gt;% rename(genome = user_genome) %&gt;% mutate(genome = str_replace_all(genome,&quot;\\\\.fa&quot;, &quot;&quot;)) %&gt;% separate(classification, c(&quot;domain&quot;,&quot;phylum&quot;,&quot;class&quot;,&quot;order&quot;,&quot;family&quot;,&quot;genus&quot;,&quot;species&quot;), sep =&quot;;&quot;) %&gt;% select(genome,domain,phylum,class,order,family,genus,species) 2.0.2.2 Genome quality Quality properties of the genomes. Derived from dREP’s Widb table. genome_quality &lt;- read_csv(&quot;data/genome_quality.csv&quot;) %&gt;% rename(genome = 1) %&gt;% arrange(match(genome, genome_taxonomy$genome)) %&gt;% select(genome, Completeness, Contamination, `Genome size (bp)`) %&gt;% rename(completeness=Completeness,contamination=Contamination,length=`Genome size (bp)`) %&gt;% mutate(genome = str_remove(genome, &quot;\\\\.fa$&quot;)) 2.0.2.3 Merged metadata object Merge taxonomy, length and quality information genome_metadata &lt;- genome_taxonomy %&gt;% left_join(genome_quality,by=&quot;genome&quot;) #join quality 2.0.3 Count table This is the document containing the number of sequencing reads from each sample have been mapped to each MAG. Note that this is the raw data that needs to be further processed before running any statistics on them. read_counts &lt;- read_tsv(&quot;data/genome_count.tsv&quot;) %&gt;% rename_all(~ str_remove_all(., &quot;.digesta_deep Read Count&quot;)) %&gt;% #simplify column names rename_all(~ str_remove_all(., &quot;.faeces_shallow Read Count&quot;)) %&gt;% #simplify column names rename(genome = 1) %&gt;% select(all_of(c(&quot;genome&quot;,sample_metadata$sample))) %&gt;% # sort samples arrange(match(genome,genome_metadata$genome)) # sort genomes 2.0.4 Base hit table This is the document containing the number of nucleotide bases have been covered by at least one read in each sample and MAG. This information is used to calculate MAG coverage values. basehits &lt;- read_tsv(&quot;data/genome_covered_bases.tsv&quot;) %&gt;% rename_all(~ str_remove_all(., &quot;.digesta_deep Covered Bases&quot;)) %&gt;% #simplify column names rename_all(~ str_remove_all(., &quot;.faeces_shallow Covered Bases&quot;)) %&gt;% #simplify column names rename(genome = 1) %&gt;% select(all_of(c(&quot;genome&quot;,sample_metadata$sample))) %&gt;% # sort samples arrange(match(genome,genome_metadata$genome)) # sort genomes 2.0.5 Genome tree This is the raw tree generated by GTDBtk, which needs to be pruned to obtain the phylogenetic tree of the genomes. Note that the archaeal tree is only generated if any archaeans are detected among the genomes. archaea_tree &lt;- read.tree(&quot;data/gtdbtk.ar53.classify.tree&quot;) #note that when no archaea are detected, this tree is not generated bacteria_tree &lt;- read.tree(&quot;data/gtdbtk.backbone.bac120.classify.tree&quot;) genome_tree &lt;- bind.tree(archaea_tree, bacteria_tree) genome_tree$tip.label &lt;- str_replace_all(genome_tree$tip.label,&quot;&#39;&quot;, &quot;&quot;) #remove single quotes in MAG names genome_tree &lt;- keep.tip(genome_tree, tip=genome_metadata$genome) # keep only MAG tips 2.0.6 MAG functional annotations This is the raw annotation table generated by DRAM, which is used to generate GIFT data using distillR. genome_annotations &lt;- read_tsv(&quot;data/genome_annotations.tsv.xz&quot;) %&gt;% rename(gene=1,genome=2) 2.1 Filter and normalise data Raw data needs to be filtered and normalised to make it useful for downstream analyses. 2.1.1 Generate coverage table By dividing the number of base hits by the length of each genome, coverage values can be calculated. genome_coverage &lt;- basehits %&gt;% mutate(across(where(is.numeric), ~ ./genome_metadata$length)) 2.1.2 Coverage filtering Genomes that have less than 30% of their length covered by reads are turned into zeros to account for the random allocation of reads across genomes due to mapping heuristics. min_coverage=0.3 read_counts_filt &lt;- genome_coverage %&gt;% mutate(across(where(is.numeric), ~ ifelse(. &gt; min_coverage, 1, 0))) %&gt;% mutate(across(-1, ~ . * read_counts[[cur_column()]])) 2.1.3 Generate genome count table After filtering the low-coverage reads, read counts are transformed into genome counts using genome-length and read-length information. readlength=150 #change if sequencing read length is different genome_counts &lt;- read_counts %&gt;% mutate(across(where(is.numeric), ~ . / (genome_metadata$length / readlength) )) genome_counts_filt &lt;- read_counts_filt %&gt;% mutate(across(where(is.numeric), ~ . / (genome_metadata$length / readlength) )) 2.1.4 Distil functional annotations Raw functional annotations are distilled into genome-inferred functional traits to generate biologically more meaningful functional traits for downstream analyses. genome_gifts &lt;- distill(genome_annotations,GIFT_db,genomecol=2,annotcol=c(9,10,19),verbosity=F) 2.2 Color scheme AlberdiLab projects use unified color schemes developed for the Earth Hologenome Initiative, to facilitate figure interpretation. phylum_colors &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% select(phylum, colors) %&gt;% unique() %&gt;% arrange(phylum) %&gt;% pull(colors, name=phylum) 2.3 Wrap working objects In the last step, the objects that are needed for downstream analyses are stored in an R object. save(read_counts, read_counts_filt, genome_counts, genome_counts_filt, genome_tree, genome_metadata, genome_gifts, sample_metadata, phylum_colors, file = &quot;data/data.Rdata&quot;) read_counts: Number of reads mapped to each genome in each sample. Note this is the unfiltered and unnormalised raw community composition table. genome_counts: Number of genomes quantified in each sample, calculated through filtering and normalising read_counts. This is the community composition table to be used in downstream analyses unless otherwise stated. genome_tree: Phylogenetic tree of the genomes, to be employed in downstream phylogenetic analyses. genome_metadata: Taxonomic and quality information of the genomes. genome_gifts: Genome-inferred functional traits of the genomes, to be employed in downstream functional analyses. sample_metadata: Treatment/population and other relevant metadata of the samples. "],["mag-catalogue.html", "Chapter 3 MAG catalogue 3.1 Genome phylogeny 3.2 Genome quality 3.3 Functional overview 3.4 Functional ordination", " Chapter 3 MAG catalogue load(&quot;data/data.Rdata&quot;) 3.1 Genome phylogeny # Generate the phylum color heatmap phylum_heatmap &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% select(genome,phylum) %&gt;% mutate(phylum = factor(phylum, levels = unique(phylum))) %&gt;% column_to_rownames(var = &quot;genome&quot;) # Generate basal tree circular_tree &lt;- force.ultrametric(genome_tree, method=&quot;extend&quot;) %&gt;% # extend to ultrametric for the sake of visualisation ggtree(., layout=&quot;fan&quot;, open.angle=10, size=0.5) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** # Add phylum ring circular_tree &lt;- gheatmap(circular_tree, phylum_heatmap, offset=0.55, width=0.1, colnames=FALSE) + scale_fill_manual(values=phylum_colors) + geom_tiplab2(size=1, hjust=-0.1) + theme(legend.position = &quot;none&quot;, plot.margin = margin(0, 0, 0, 0), panel.margin = margin(0, 0, 0, 0)) # Flush color scale to enable a new color scheme in the next ring circular_tree &lt;- circular_tree + new_scale_fill() # Add completeness ring circular_tree &lt;- circular_tree + new_scale_fill() + scale_fill_gradient(low = &quot;#d1f4ba&quot;, high = &quot;#f4baba&quot;) + geom_fruit( data=genome_metadata, geom=geom_bar, mapping = aes(x=completeness, y=genome, fill=contamination), offset = 0.55, orientation=&quot;y&quot;, stat=&quot;identity&quot;) # Add genome-size ring circular_tree &lt;- circular_tree + new_scale_fill() + scale_fill_manual(values = &quot;#cccccc&quot;) + geom_fruit( data=genome_metadata, geom=geom_bar, mapping = aes(x=length, y=genome), offset = 0.05, orientation=&quot;y&quot;, stat=&quot;identity&quot;) # Add text circular_tree &lt;- circular_tree + annotate(&#39;text&#39;, x=2.7, y=0, label=&#39; Phylum&#39;, family=&#39;arial&#39;, size=3.5) + annotate(&#39;text&#39;, x=3.1, y=0, label=&#39; Genome quality&#39;, family=&#39;arial&#39;, size=3.5) + annotate(&#39;text&#39;, x=3.5, y=0, label=&#39; Genome size&#39;, family=&#39;arial&#39;, size=3.5) #Plot circular tree circular_tree %&gt;% open_tree(30) %&gt;% rotate_tree(90) 3.2 Genome quality tibble(Completeness= paste0(round(genome_metadata$completeness %&gt;% mean(),2), &quot;±&quot;, round(genome_metadata$completeness %&gt;% sd(),2)), Contamination= paste0(round(genome_metadata$contamination %&gt;% mean(),2), &quot;±&quot;, round(genome_metadata$contamination %&gt;% sd(),2))) %&gt;% tt() tinytable_sv8kxn47tts6ijjc9kl8 .table td.tinytable_css_cotibeqlf3lyxs7xa474, .table th.tinytable_css_cotibeqlf3lyxs7xa474 { border-bottom: solid 0.1em #d3d8dc; } Completeness Contamination 85.34±11.87 3.5±3.96 #Generate quality biplot genome_biplot &lt;- genome_metadata %&gt;% select(c(genome,domain,phylum,completeness,contamination,length)) %&gt;% arrange(match(genome, rev(genome_tree$tip.label))) %&gt;% #sort MAGs according to phylogenetic tree ggplot(aes(x=completeness,y=contamination,size=length,color=phylum)) + geom_point(alpha=0.7) + xlim(c(50,100)) + ylim(c(10,0)) + scale_color_manual(values=phylum_colors) + labs(y= &quot;Contamination&quot;, x = &quot;Completeness&quot;) + theme_classic() + theme(legend.position = &quot;none&quot;) #Generate contamination boxplot genome_contamination &lt;- genome_metadata %&gt;% ggplot(aes(y=contamination)) + ylim(c(10,0)) + geom_boxplot(colour = &quot;#999999&quot;, fill=&quot;#cccccc&quot;) + theme_void() + theme(legend.position = &quot;none&quot;, axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(), plot.margin = unit(c(0, 0, 0.40, 0),&quot;inches&quot;)) #add bottom-margin (top, right, bottom, left) #Generate completeness boxplot genome_completeness &lt;- genome_metadata %&gt;% ggplot(aes(x=completeness)) + xlim(c(50,100)) + geom_boxplot(colour = &quot;#999999&quot;, fill=&quot;#cccccc&quot;) + theme_void() + theme(legend.position = &quot;none&quot;, axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(), plot.margin = unit(c(0, 0, 0, 0.50),&quot;inches&quot;)) #add left-margin (top, right, bottom, left) #Render composite figure grid.arrange(grobs = list(genome_completeness,genome_biplot,genome_contamination), layout_matrix = rbind(c(1,1,1,1,1,1,1,1,1,1,1,4), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3))) 3.3 Functional overview # Aggregate basal GIFT into elements function_table &lt;- genome_gifts %&gt;% to.elements(., GIFT_db) # Generate basal tree function_tree &lt;- force.ultrametric(genome_tree, method=&quot;extend&quot;) %&gt;% ggtree(., size = 0.3) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** #Add phylum colors next to the tree tips function_tree &lt;- gheatmap(function_tree, phylum_heatmap, offset=0, width=0.1, colnames=FALSE) + scale_fill_manual(values=phylum_colors) + labs(fill=&quot;Phylum&quot;) #Reset fill scale to use a different colour profile in the heatmap function_tree &lt;- function_tree + new_scale_fill() #Add functions heatmap function_tree &lt;- gheatmap(function_tree, function_table, offset=0.5, width=3.5, colnames=FALSE) + vexpand(.08) + coord_cartesian(clip = &quot;off&quot;) + scale_fill_gradient(low = &quot;#f4f4f4&quot;, high = &quot;steelblue&quot;, na.value=&quot;white&quot;) + labs(fill=&quot;GIFT&quot;) #Reset fill scale to use a different colour profile in the heatmap function_tree &lt;- function_tree + new_scale_fill() # Add completeness barplots function_tree &lt;- function_tree + geom_fruit(data=genome_metadata, geom=geom_bar, grid.params=list(axis=&quot;x&quot;, text.size=2, nbreak = 1), axis.params=list(vline=TRUE), mapping = aes(x=length, y=genome, fill=completeness), offset = 3.8, orientation=&quot;y&quot;, stat=&quot;identity&quot;) + scale_fill_gradient(low = &quot;#cf8888&quot;, high = &quot;#a2cc87&quot;) + labs(fill=&quot;Genome\\ncompleteness&quot;) function_tree 3.4 Functional ordination # Generate the tSNE ordination tSNE_function &lt;- Rtsne(X=function_table, dims = 2, check_duplicates = FALSE) # Plot the ordination function_ordination &lt;- tSNE_function$Y %&gt;% as.data.frame() %&gt;% mutate(genome=rownames(function_table)) %&gt;% inner_join(genome_metadata, by=&quot;genome&quot;) %&gt;% rename(tSNE1=&quot;V1&quot;, tSNE2=&quot;V2&quot;) %&gt;% select(genome,phylum,tSNE1,tSNE2, length) %&gt;% ggplot(aes(x = tSNE1, y = tSNE2, color = phylum, size=length))+ geom_point(shape=16, alpha=0.7) + scale_color_manual(values=phylum_colors) + theme_minimal() + labs(color=&quot;Phylum&quot;, size=&quot;Genome size&quot;) + guides(color = guide_legend(override.aes = list(size = 5))) # enlarge Phylum dots in legend function_ordination "],["community-composition.html", "Chapter 4 Community composition 4.1 Sort samples 4.2 Genome count table (digesta) 4.3 Taxonomy barplot (digesta) 4.4 Taxonomy barplot (faeces) 4.5 Genome count table (faeces)", " Chapter 4 Community composition load(&quot;data/data.Rdata&quot;) 4.1 Sort samples #Arranged by days samples_days &lt;- sample_metadata %&gt;% arrange(day,animal,library) #Arranged by animal samples_animal &lt;- sample_metadata %&gt;% arrange(treatment,animal, day) 4.2 Genome count table (digesta) vertical_tree &lt;- force.ultrametric(genome_tree,method=&quot;extend&quot;) %&gt;% ggtree(., size = 0.3) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** Found more than one class &quot;phylo&quot; in cache; using the first, from namespace &#39;phyloseq&#39; Also defined by &#39;tidytree&#39; #Add phylum colors phylum_colors &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% mutate(phylum = factor(phylum, levels = unique(phylum))) %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% select(phylum) Rows: 202 Columns: 2 ── Column specification ───────────────────────────────────────────────────────────────────────────────────────────────────────────────────── Delimiter: &quot;\\t&quot; chr (2): phylum, colors ℹ Use `spec()` to retrieve the full column specification for this data. ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. colors_alphabetic &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% select(phylum, colors) %&gt;% unique() %&gt;% arrange(phylum) %&gt;% select(colors) %&gt;% pull() Rows: 202 Columns: 2 ── Column specification ───────────────────────────────────────────────────────────────────────────────────────────────────────────────────── Delimiter: &quot;\\t&quot; chr (2): phylum, colors ℹ Use `spec()` to retrieve the full column specification for this data. ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. vertical_tree &lt;- gheatmap(vertical_tree, phylum_colors, offset=-0.6, width=0.1, colnames=FALSE) + scale_fill_manual(values=colors_alphabetic) + new_scale_fill() Scale for y is already present. Adding another scale for y, which will replace the existing scale. Scale for fill is already present. Adding another scale for fill, which will replace the existing scale. #Add genome counts of TJ1 genome_counts_digesta_TJ1 &lt;- genome_counts_filt %&gt;% select(all_of(c(&quot;genome&quot;,sample_metadata %&gt;% filter(type==&quot;digesta&quot;) %&gt;% filter(treatment==&quot;TJ1&quot;) %&gt;% select(sample) %&gt;% pull()))) %&gt;% column_to_rownames(var=&quot;genome&quot;) vertical_tree &lt;- gheatmap(vertical_tree, log10(genome_counts_digesta_TJ1), offset=-0.4, width=1, colnames=TRUE, colnames_angle=90, font.size=3, colnames_position=&quot;top&quot;, colnames_offset_y = 15) + vexpand(.08) + coord_cartesian(clip = &quot;off&quot;) + scale_fill_gradient(low = &quot;white&quot;, high = &quot;steelblue&quot;, na.value=&quot;white&quot;) + new_scale_fill() Scale for fill is already present. Adding another scale for fill, which will replace the existing scale. #Add mean values of TJ1 genome_counts_digesta_TJ1_mean &lt;- genome_counts_digesta_TJ1 %&gt;% rownames_to_column(var=&quot;genome&quot;) %&gt;% rowwise() %&gt;% mutate(mean = mean(c_across(where(is.numeric)))) %&gt;% select(genome,mean) vertical_tree &lt;- vertical_tree + scale_fill_manual(values = &quot;#cccccc&quot;) + geom_fruit( data=genome_counts_digesta_TJ1_mean, geom=geom_bar, mapping = aes(x=mean, y=genome), offset = 0.9, width= 0.2, orientation=&quot;y&quot;, stat=&quot;identity&quot;) + new_scale_fill() #Add genome counts of TJ2 genome_counts_digesta_TJ2 &lt;- genome_counts_filt %&gt;% select(all_of(c(&quot;genome&quot;,sample_metadata %&gt;% filter(type==&quot;digesta&quot;) %&gt;% filter(treatment==&quot;TJ2&quot;) %&gt;% select(sample) %&gt;% pull()))) %&gt;% column_to_rownames(var=&quot;genome&quot;) #Add mean values of TJ2 genome_counts_digesta_TJ2_mean &lt;- genome_counts_digesta_TJ2 %&gt;% rownames_to_column(var=&quot;genome&quot;) %&gt;% rowwise() %&gt;% mutate(mean = mean(c_across(where(is.numeric)))) %&gt;% select(genome,mean) vertical_tree &lt;- vertical_tree + scale_fill_manual(values = &quot;#cccccc&quot;) + geom_fruit( data=genome_counts_digesta_TJ2_mean, geom=geom_bar, mapping = aes(x=-mean, y=genome), offset = 0.2, width= 0.2, orientation=&quot;y&quot;, stat=&quot;identity&quot;) + new_scale_fill() vertical_tree &lt;- gheatmap(vertical_tree, log10(genome_counts_digesta_TJ2), offset=3.2, width=1, colnames=TRUE, colnames_angle=90, font.size=3, colnames_position=&quot;top&quot;, colnames_offset_y = 15) + vexpand(.08) + coord_cartesian(clip = &quot;off&quot;) + scale_fill_gradient(low = &quot;white&quot;, high = &quot;steelblue&quot;, na.value=&quot;white&quot;) + new_scale_fill() Coordinate system already present. Adding new coordinate system, which will replace the existing one. Scale for fill is already present. Adding another scale for fill, which will replace the existing scale. vertical_tree + theme(legend.position=&#39;none&#39;) 4.3 Taxonomy barplot (digesta) #Get phylum colors from the EHI standard phylum_colors &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% select(phylum, colors) %&gt;% unique() %&gt;% arrange(phylum) %&gt;% select(colors) %&gt;% pull() Rows: 202 Columns: 2 ── Column specification ───────────────────────────────────────────────────────────────────────────────────────────────────────────────────── Delimiter: &quot;\\t&quot; chr (2): phylum, colors ℹ Use `spec()` to retrieve the full column specification for this data. ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. barplot_digesta &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(., genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% #append sample metadata filter(type==&quot;digesta&quot;) %&gt;% #retain only digesta samples ggplot(., aes(x=sample,y=count, fill=phylum, group=phylum)) + #grouping enables keeping the same sorting of taxonomic units geom_bar(stat=&quot;identity&quot;, colour=&quot;white&quot;, linewidth=0.1) + #plot stacked bars with white borders scale_fill_manual(values=phylum_colors) + labs(y = &quot;Relative abundance&quot;) + facet_grid(.~treatment, scales=&quot;free_x&quot;) + #facet days guides(fill = guide_legend(ncol = 1)) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), axis.title.x = element_blank(), panel.background = element_blank(), panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(linewidth = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;)) + labs(fill=&quot;Phylum&quot;) barplot_digesta 4.4 Taxonomy barplot (faeces) barplot_faeces_days &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(., genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% #append sample metadata filter(type==&quot;faeces&quot;) %&gt;% #retain only faecal samples mutate(sample = factor(sample, levels = unique(samples_days$sample))) %&gt;% #sort per animal code ggplot(., aes(x=sample,y=count, fill=phylum, group=phylum)) + #grouping enables keeping the same sorting of taxonomic units geom_bar(stat=&quot;identity&quot;, colour=&quot;white&quot;, linewidth=0.1) + #plot stacked bars with white borders scale_fill_manual(values=phylum_colors) + labs(y = &quot;Relative abundance&quot;) + facet_nested(. ~ day + treatment, scales=&quot;free_x&quot;) + #facet per day and treatment guides(fill = guide_legend(ncol = 1)) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), axis.title.x = element_blank(), panel.background = element_blank(), panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(linewidth = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;)) + labs(fill=&quot;Phylum&quot;) barplot_faeces_days Warning: Removed 483 rows containing missing values or values outside the scale range (`geom_bar()`). barplot_faeces_animals &lt;- genome_counts %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(., genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% #append sample metadata filter(type==&quot;faeces&quot;) %&gt;% #retain only faecal samples mutate(sample = factor(sample, levels = unique(samples_days$sample))) %&gt;% #sort samples per sampling day mutate(animal = factor(animal, levels = unique(samples_animal$animal))) %&gt;% #sort animals per treatment ggplot(., aes(x=sample,y=count, fill=phylum, group=phylum)) + #grouping enables keeping the same sorting of taxonomic units geom_bar(stat=&quot;identity&quot;, colour=&quot;white&quot;, linewidth=0.1) + #plot stacked bars with white borders scale_fill_manual(values=phylum_colors) + labs(y = &quot;Relative abundance&quot;) + facet_nested(. ~ treatment + animal, scales=&quot;free_x&quot;) + #facet per treatment and animal guides(fill = guide_legend(ncol = 1)) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), axis.title.x = element_blank(), panel.background = element_blank(), panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(linewidth = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;)) + labs(fill=&quot;Phylum&quot;) barplot_faeces_animals 4.5 Genome count table (faeces) vertical_tree &lt;- force.ultrametric(genome_tree,method=&quot;extend&quot;) %&gt;% ggtree(., size = 0.3) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** Found more than one class &quot;phylo&quot; in cache; using the first, from namespace &#39;phyloseq&#39; Also defined by &#39;tidytree&#39; #Add phylum colors phylum_colors &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% mutate(phylum = factor(phylum, levels = unique(phylum))) %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% select(phylum) Rows: 202 Columns: 2 ── Column specification ───────────────────────────────────────────────────────────────────────────────────────────────────────────────────── Delimiter: &quot;\\t&quot; chr (2): phylum, colors ℹ Use `spec()` to retrieve the full column specification for this data. ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. colors_alphabetic &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% select(phylum, colors) %&gt;% unique() %&gt;% arrange(phylum) %&gt;% select(colors) %&gt;% pull() Rows: 202 Columns: 2 ── Column specification ───────────────────────────────────────────────────────────────────────────────────────────────────────────────────── Delimiter: &quot;\\t&quot; chr (2): phylum, colors ℹ Use `spec()` to retrieve the full column specification for this data. ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. vertical_tree &lt;- gheatmap(vertical_tree, phylum_colors, offset=-0.6, width=0.1, colnames=FALSE) + scale_fill_manual(values=colors_alphabetic) + new_scale_fill() Scale for y is already present. Adding another scale for y, which will replace the existing scale. Scale for fill is already present. Adding another scale for fill, which will replace the existing scale. #Add genome counts of d0 genome_counts_faeces_d0 &lt;- genome_counts_filt %&gt;% select(all_of(c(&quot;genome&quot;,sample_metadata %&gt;% filter(type==&quot;faeces&quot;) %&gt;% filter(day==&quot;0&quot;) %&gt;% select(sample) %&gt;% pull()))) %&gt;% column_to_rownames(var=&quot;genome&quot;) vertical_tree &lt;- gheatmap(vertical_tree, log10(genome_counts_faeces_d0_d0), offset=-0.4, width=0.3, colnames=FALSE, colnames_angle=90, font.size=3, colnames_position=&quot;top&quot;, colnames_offset_y = 15) + vexpand(.08) + coord_cartesian(clip = &quot;off&quot;) + scale_fill_gradient(low = &quot;lightblue&quot;, high = &quot;#315b7d&quot;, na.value=&quot;#f4f4f4&quot;) + new_scale_fill() Scale for y is already present. Adding another scale for y, which will replace the existing scale. Scale for fill is already present. Adding another scale for fill, which will replace the existing scale. #Add mean values of d0 genome_counts_faeces_d0_mean &lt;- genome_counts_faeces_d0 %&gt;% rownames_to_column(var=&quot;genome&quot;) %&gt;% rowwise() %&gt;% mutate(mean = mean(c_across(where(is.numeric)))) %&gt;% select(genome,mean) vertical_tree &lt;- vertical_tree + scale_fill_manual(values = &quot;#cccccc&quot;) + geom_fruit( data=genome_counts_faeces_d0_mean, geom=geom_bar, mapping = aes(x=mean, y=genome), pwidth = 0.1, offset = 0.15, width= 1, orientation=&quot;y&quot;, axis.params=list(axis=&quot;x&quot;), stat=&quot;identity&quot;) + new_scale_fill() #Add genome counts of d7 genome_counts_faeces_d7 &lt;- genome_counts_filt %&gt;% select(all_of(c(&quot;genome&quot;,sample_metadata %&gt;% filter(type==&quot;faeces&quot;) %&gt;% filter(day==&quot;7&quot;) %&gt;% select(sample) %&gt;% pull()))) %&gt;% column_to_rownames(var=&quot;genome&quot;) vertical_tree &lt;- gheatmap(vertical_tree, log10(genome_counts_faeces_d7), offset=0.6, width=0.3, colnames=FALSE, colnames_angle=90, font.size=3, colnames_position=&quot;top&quot;, colnames_offset_y = 15) + vexpand(.08) + coord_cartesian(clip = &quot;off&quot;) + scale_fill_gradient(low = &quot;lightblue&quot;, high = &quot;#315b7d&quot;, na.value=&quot;#f4f4f4&quot;) + new_scale_fill() Scale for y is already present. Adding another scale for y, which will replace the existing scale. Coordinate system already present. Adding new coordinate system, which will replace the existing one. Scale for fill is already present. Adding another scale for fill, which will replace the existing scale. #Add mean values of d7 genome_counts_faeces_d7_mean &lt;- genome_counts_faeces_d7 %&gt;% rownames_to_column(var=&quot;genome&quot;) %&gt;% rowwise() %&gt;% mutate(mean = mean(c_across(where(is.numeric)))) %&gt;% select(genome,mean) vertical_tree &lt;- vertical_tree + scale_fill_manual(values = &quot;#cccccc&quot;) + geom_fruit( data=genome_counts_faeces_d7_mean, geom=geom_bar, mapping = aes(x=mean, y=genome), pwidth = 0.1, offset = 0.3, width= 1, orientation=&quot;y&quot;, axis.params=list(axis=&quot;x&quot;), stat=&quot;identity&quot;) + new_scale_fill() #Add genome counts of d14 genome_counts_faeces_d14 &lt;- genome_counts_filt %&gt;% select(all_of(c(&quot;genome&quot;,sample_metadata %&gt;% filter(type==&quot;faeces&quot;) %&gt;% filter(day==&quot;14&quot;) %&gt;% select(sample) %&gt;% pull()))) %&gt;% column_to_rownames(var=&quot;genome&quot;) vertical_tree &lt;- gheatmap(vertical_tree, log10(genome_counts_faeces_d14), offset=1.7, width=0.3, colnames=FALSE, colnames_angle=90, font.size=3, colnames_position=&quot;top&quot;, colnames_offset_y = 15) + vexpand(.08) + coord_cartesian(clip = &quot;off&quot;) + scale_fill_gradient(low = &quot;lightblue&quot;, high = &quot;#315b7d&quot;, na.value=&quot;#f4f4f4&quot;) + new_scale_fill() Scale for y is already present. Adding another scale for y, which will replace the existing scale. Coordinate system already present. Adding new coordinate system, which will replace the existing one. Scale for fill is already present. Adding another scale for fill, which will replace the existing scale. #Add mean values of d14 genome_counts_faeces_d14_mean &lt;- genome_counts_faeces_d14 %&gt;% rownames_to_column(var=&quot;genome&quot;) %&gt;% rowwise() %&gt;% mutate(mean = mean(c_across(where(is.numeric)))) %&gt;% select(genome,mean) vertical_tree &lt;- vertical_tree + scale_fill_manual(values = &quot;#cccccc&quot;) + geom_fruit( data=genome_counts_faeces_d14_mean, geom=geom_bar, mapping = aes(x=mean, y=genome), pwidth = 0.1, offset = 0.33, width= 1, orientation=&quot;y&quot;, axis.params=list(axis=&quot;x&quot;), stat=&quot;identity&quot;) + new_scale_fill() #Add genome counts of d21 genome_counts_faeces_d21 &lt;- genome_counts_filt %&gt;% select(all_of(c(&quot;genome&quot;,sample_metadata %&gt;% filter(type==&quot;faeces&quot;) %&gt;% filter(day==&quot;21&quot;) %&gt;% select(sample) %&gt;% pull()))) %&gt;% column_to_rownames(var=&quot;genome&quot;) vertical_tree &lt;- gheatmap(vertical_tree, log10(genome_counts_faeces_d21), offset=2.7, width=0.3, colnames=FALSE, colnames_angle=90, font.size=3, colnames_position=&quot;top&quot;, colnames_offset_y = 15) + vexpand(.08) + coord_cartesian(clip = &quot;off&quot;) + scale_fill_gradient(low = &quot;lightblue&quot;, high = &quot;#315b7d&quot;, na.value=&quot;#f4f4f4&quot;) + new_scale_fill() Scale for y is already present. Adding another scale for y, which will replace the existing scale. Coordinate system already present. Adding new coordinate system, which will replace the existing one. Scale for fill is already present. Adding another scale for fill, which will replace the existing scale. #Add mean values of d21 genome_counts_faeces_d21_mean &lt;- genome_counts_faeces_d21 %&gt;% rownames_to_column(var=&quot;genome&quot;) %&gt;% rowwise() %&gt;% mutate(mean = mean(c_across(where(is.numeric)))) %&gt;% select(genome,mean) vertical_tree &lt;- vertical_tree + scale_fill_manual(values = &quot;#cccccc&quot;) + geom_fruit( data=genome_counts_faeces_d21_mean, geom=geom_bar, mapping = aes(x=mean, y=genome), pwidth = 0.1, offset = 0.3, width= 1, orientation=&quot;y&quot;, axis.params=list(axis=&quot;x&quot;), stat=&quot;identity&quot;) + new_scale_fill() vertical_tree + theme(legend.position=&#39;none&#39;) 4.5.1 Top genera per treatment/time genus_rank &lt;- genome_counts %&gt;% pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(., genome_metadata, by = join_by(genome == genome)) %&gt;% #append taxonomy inner_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% #append metadata filter(type==&quot;faeces&quot;) %&gt;% #retain only digesta samples group_by(genus) %&gt;% summarise(count=sum(count)) %&gt;% arrange(-count) %&gt;% select(genus) %&gt;% slice(1:30) %&gt;% pull() genome_counts %&gt;% pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(., genome_metadata, by = join_by(genome == genome)) %&gt;% #append taxonomy inner_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% #append metadata filter(type==&quot;faeces&quot;) %&gt;% #retain only digesta samples group_by(sample,treatment,day,genus) %&gt;% summarise(count=sum(count)) %&gt;% filter(genus %in% genus_rank) %&gt;% mutate(genus = fct_relevel(genus, rev(genus_rank))) %&gt;% ggplot(., aes(y=genus,x=count)) + geom_col() + facet_wrap(vars(treatment, day), nrow = 1) + theme(axis.text.x=element_blank(), #remove x axis labels axis.ticks.x=element_blank(), #remove x axis ticks ) labs(y=&quot;Top 30 genera&quot;,x=&quot;Genome counts&quot;) $y [1] &quot;Top 30 genera&quot; $x [1] &quot;Genome counts&quot; attr(,&quot;class&quot;) [1] &quot;labels&quot; "],["alpha-diversity.html", "Chapter 5 Alpha diversity", " Chapter 5 Alpha diversity load(&quot;data/data.Rdata&quot;) # Calculate Hill numbers richness &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 0) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(richness = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) neutral &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(neutral = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) phylogenetic &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1, tree = genome_tree) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(phylogenetic = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) # Aggregate basal GIFT into elements dist &lt;- genome_gifts %&gt;% to.elements(., GIFT_db) %&gt;% traits2dist(., method = &quot;gower&quot;) functional &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1, dist = dist) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(functional = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) %&gt;% mutate(functional = if_else(is.nan(functional), 1, functional)) # Merge all metrics alpha_div &lt;- richness %&gt;% full_join(neutral, by = join_by(sample == sample)) %&gt;% full_join(phylogenetic, by = join_by(sample == sample)) %&gt;% full_join(functional, by = join_by(sample == sample)) #Richness alpha_div %&gt;% pivot_longer(-sample, names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% filter(type == &quot;digesta&quot;) %&gt;% filter(metric==&quot;richness&quot;) %&gt;% ggplot(aes(y = value, x = treatment, group=treatment, color=treatment, fill=treatment)) + geom_boxplot(outlier.shape = NA) + geom_jitter(alpha=0.5) + scale_color_manual(name=&quot;Treatment&quot;, breaks=c(&quot;TJ1&quot;,&quot;TJ2&quot;), values=c(&quot;#6A9AC3&quot;,&quot;#AFD699&quot;)) + scale_fill_manual(name=&quot;Treatment&quot;, breaks=c(&quot;TJ1&quot;,&quot;TJ2&quot;), values=c(&quot;#6A9AC350&quot;,&quot;#AFD69950&quot;)) + coord_cartesian(xlim = c(1, NA)) + theme_classic() + theme( strip.background = element_blank(), panel.grid.minor.x = element_line(size = .1, color = &quot;grey&quot;), axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_text(angle = 45, hjust = 1) ) #Neutral alpha_div %&gt;% pivot_longer(-sample, names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% filter(type == &quot;digesta&quot;) %&gt;% filter(metric==&quot;neutral&quot;) %&gt;% ggplot(aes(y = value, x = treatment, group=treatment, color=treatment, fill=treatment)) + geom_boxplot(outlier.shape = NA) + geom_jitter(alpha=0.5) + scale_color_manual(name=&quot;Treatment&quot;, breaks=c(&quot;TJ1&quot;,&quot;TJ2&quot;), values=c(&quot;#6A9AC3&quot;,&quot;#AFD699&quot;)) + scale_fill_manual(name=&quot;Treatment&quot;, breaks=c(&quot;TJ1&quot;,&quot;TJ2&quot;), values=c(&quot;#6A9AC350&quot;,&quot;#AFD69950&quot;)) + coord_cartesian(xlim = c(1, NA)) + theme_classic() + theme( strip.background = element_blank(), panel.grid.minor.x = element_line(size = .1, color = &quot;grey&quot;), axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_text(angle = 45, hjust = 1) ) #Phylogenetic alpha_div %&gt;% pivot_longer(-sample, names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% filter(type == &quot;digesta&quot;) %&gt;% filter(metric==&quot;phylogenetic&quot;) %&gt;% ggplot(aes(y = value, x = treatment, group=treatment, color=treatment, fill=treatment)) + geom_boxplot(outlier.shape = NA) + geom_jitter(alpha=0.5) + scale_color_manual(name=&quot;Treatment&quot;, breaks=c(&quot;TJ1&quot;,&quot;TJ2&quot;), values=c(&quot;#6A9AC3&quot;,&quot;#AFD699&quot;)) + scale_fill_manual(name=&quot;Treatment&quot;, breaks=c(&quot;TJ1&quot;,&quot;TJ2&quot;), values=c(&quot;#6A9AC350&quot;,&quot;#AFD69950&quot;)) + coord_cartesian(xlim = c(1, NA)) + theme_classic() + theme( strip.background = element_blank(), panel.grid.minor.x = element_line(size = .1, color = &quot;grey&quot;), axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_text(angle = 45, hjust = 1) ) #Functional alpha_div %&gt;% pivot_longer(-sample, names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% filter(type == &quot;digesta&quot;) %&gt;% filter(metric==&quot;functional&quot;) %&gt;% ggplot(aes(y = value, x = treatment, group=treatment, color=treatment, fill=treatment)) + geom_boxplot(outlier.shape = NA) + geom_jitter(alpha=0.5) + scale_color_manual(name=&quot;Treatment&quot;, breaks=c(&quot;TJ1&quot;,&quot;TJ2&quot;), values=c(&quot;#6A9AC3&quot;,&quot;#AFD699&quot;)) + scale_fill_manual(name=&quot;Treatment&quot;, breaks=c(&quot;TJ1&quot;,&quot;TJ2&quot;), values=c(&quot;#6A9AC350&quot;,&quot;#AFD69950&quot;)) + coord_cartesian(xlim = c(1, NA)) + theme_classic() + theme( strip.background = element_blank(), panel.grid.minor.x = element_line(size = .1, color = &quot;grey&quot;), axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_text(angle = 45, hjust = 1) ) #Richness alpha_div %&gt;% pivot_longer(-sample, names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% filter(type == &quot;faeces&quot;) %&gt;% filter(metric==&quot;richness&quot;) %&gt;% ggplot(aes(y = value, x = treatment, group=treatment, color=treatment, fill=treatment)) + geom_boxplot(outlier.shape = NA) + geom_jitter(alpha=0.5) + scale_color_manual(name=&quot;Treatment&quot;, breaks=c(&quot;TJ1&quot;,&quot;TJ2&quot;), values=c(&quot;#6A9AC3&quot;,&quot;#AFD699&quot;)) + scale_fill_manual(name=&quot;Treatment&quot;, breaks=c(&quot;TJ1&quot;,&quot;TJ2&quot;), values=c(&quot;#6A9AC350&quot;,&quot;#AFD69950&quot;)) + coord_cartesian(xlim = c(1, NA)) + facet_nested(. ~ day, scales=&quot;free&quot;) + #facet per treatment and animal theme_classic() + theme( strip.background = element_blank(), panel.grid.minor.x = element_line(size = .1, color = &quot;grey&quot;), axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_text(angle = 45, hjust = 1) ) #Neutral alpha_div %&gt;% pivot_longer(-sample, names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% filter(type == &quot;faeces&quot;) %&gt;% filter(metric==&quot;neutral&quot;) %&gt;% ggplot(aes(y = value, x = treatment, group=treatment, color=treatment, fill=treatment)) + geom_boxplot(outlier.shape = NA) + geom_jitter(alpha=0.5) + scale_color_manual(name=&quot;Treatment&quot;, breaks=c(&quot;TJ1&quot;,&quot;TJ2&quot;), values=c(&quot;#6A9AC3&quot;,&quot;#AFD699&quot;)) + scale_fill_manual(name=&quot;Treatment&quot;, breaks=c(&quot;TJ1&quot;,&quot;TJ2&quot;), values=c(&quot;#6A9AC350&quot;,&quot;#AFD69950&quot;)) + coord_cartesian(xlim = c(1, NA)) + facet_nested(. ~ day, scales=&quot;free&quot;) + #facet per treatment and animal theme_classic() + theme( strip.background = element_blank(), panel.grid.minor.x = element_line(size = .1, color = &quot;grey&quot;), axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_text(angle = 45, hjust = 1) ) #Phylogenetic alpha_div %&gt;% pivot_longer(-sample, names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% filter(type == &quot;faeces&quot;) %&gt;% filter(metric==&quot;phylogenetic&quot;) %&gt;% ggplot(aes(y = value, x = treatment, group=treatment, color=treatment, fill=treatment)) + geom_boxplot(outlier.shape = NA) + geom_jitter(alpha=0.5) + scale_color_manual(name=&quot;Treatment&quot;, breaks=c(&quot;TJ1&quot;,&quot;TJ2&quot;), values=c(&quot;#6A9AC3&quot;,&quot;#AFD699&quot;)) + scale_fill_manual(name=&quot;Treatment&quot;, breaks=c(&quot;TJ1&quot;,&quot;TJ2&quot;), values=c(&quot;#6A9AC350&quot;,&quot;#AFD69950&quot;)) + coord_cartesian(xlim = c(1, NA)) + facet_nested(. ~ day, scales=&quot;free&quot;) + #facet per treatment and animal theme_classic() + theme( strip.background = element_blank(), panel.grid.minor.x = element_line(size = .1, color = &quot;grey&quot;), axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_text(angle = 45, hjust = 1) ) #Functional alpha_div %&gt;% pivot_longer(-sample, names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% filter(type == &quot;faeces&quot;) %&gt;% filter(metric==&quot;functional&quot;) %&gt;% ggplot(aes(y = value, x = treatment, group=treatment, color=treatment, fill=treatment)) + geom_boxplot(outlier.shape = NA) + geom_jitter(alpha=0.5) + scale_color_manual(name=&quot;Treatment&quot;, breaks=c(&quot;TJ1&quot;,&quot;TJ2&quot;), values=c(&quot;#6A9AC3&quot;,&quot;#AFD699&quot;)) + scale_fill_manual(name=&quot;Treatment&quot;, breaks=c(&quot;TJ1&quot;,&quot;TJ2&quot;), values=c(&quot;#6A9AC350&quot;,&quot;#AFD69950&quot;)) + coord_cartesian(xlim = c(1, NA)) + facet_nested(. ~ day, scales=&quot;free&quot;) + #facet per treatment and animal theme_classic() + theme( strip.background = element_blank(), panel.grid.minor.x = element_line(size = .1, color = &quot;grey&quot;), axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_text(angle = 45, hjust = 1) ) "],["pacbio-selection.html", "Chapter 6 PacBio selection 6.1 Phylogenetic diversity 6.2 TOP10 candidate samples", " Chapter 6 PacBio selection load(&quot;data/data.Rdata&quot;) 6.1 Phylogenetic diversity phylogenetic_diversity &lt;- genome_counts %&gt;% column_to_rownames(var=&quot;genome&quot;) %&gt;% select(where(~!all(. == 0))) %&gt;% hilldiv(.,q=1,tree=genome_tree) %&gt;% t() %&gt;% as.data.frame() %&gt;% rename(phylogenetic=1) %&gt;% rownames_to_column(var=&quot;sample&quot;) 6.2 TOP10 candidate samples #Select top10 selection &lt;- phylogenetic_diversity %&gt;% left_join(sample_metadata,by=&quot;sample&quot;) %&gt;% filter(type==&quot;digesta&quot;) %&gt;% arrange(-phylogenetic) %&gt;% unique() %&gt;% select(sample) %&gt;% slice(1:20) %&gt;% pull() #Print statistics phylogenetic_diversity %&gt;% left_join(sample_metadata,by=&quot;sample&quot;) %&gt;% arrange(-phylogenetic) %&gt;% unique() %&gt;% slice(1:20) %&gt;% mutate(number_of_genomes=genome_counts_filt %&gt;% select(all_of(c(&quot;genome&quot;,selection))) %&gt;% summarise(across(starts_with(&quot;D&quot;), ~ sum(. != 0))) %&gt;% t()) %&gt;% select(sample, phylogenetic,, number_of_genomes, treatment) %&gt;% rename(phylogenetic_diversity=phylogenetic) %&gt;% tt() tinytable_xg2c5jgty7zbzjn6pn84 .table td.tinytable_css_okluv8nsijw79umpc26q, .table th.tinytable_css_okluv8nsijw79umpc26q { border-bottom: solid 0.1em #d3d8dc; } sample phylogenetic_diversity number_of_genomes treatment D300334 10.141354 370 TJ1 D300381 10.050013 356 TJ2 D300312 9.993504 337 TJ1 D300366 9.813757 316 TJ2 D300294 9.579539 260 TJ1 D300287 9.576082 337 TJ2 D300328 9.505737 268 TJ1 D300367 9.273162 325 TJ1 D300345 9.208521 353 TJ1 D300326 9.199751 255 TJ2 D300346 9.142735 326 TJ2 D300335 9.123665 325 TJ2 D300350 8.975822 351 TJ1 D300288 8.923542 335 TJ1 D300359 8.911701 333 TJ1 D300249 8.908441 313 TJ1 D300392 8.823467 307 TJ2 D300379 8.823219 297 TJ1 D300378 8.742030 302 TJ1 D300315 8.725539 267 TJ2 We will need to select a representation of trials and treatments with high microbial fractions and diversities to optimise pacbio sequencing as much as we can. vertical_tree &lt;- force.ultrametric(genome_tree,method=&quot;extend&quot;) %&gt;% ggtree(., size = 0.3) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** #Add phylum colors phylum_colors &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% mutate(phylum = factor(phylum, levels = unique(phylum))) %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% select(phylum) colors_alphabetic &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% select(phylum, colors) %&gt;% unique() %&gt;% arrange(phylum) %&gt;% select(colors) %&gt;% pull() vertical_tree &lt;- gheatmap(vertical_tree, phylum_colors, offset=-0.6, width=0.1, colnames=FALSE) + scale_fill_manual(values=colors_alphabetic) + new_scale_fill() #Add genome counts of d0 genome_counts_selection &lt;- genome_counts_filt %&gt;% select(all_of(c(&quot;genome&quot;,selection))) %&gt;% column_to_rownames(var=&quot;genome&quot;) %&gt;% tss() vertical_tree &lt;- gheatmap(vertical_tree, log10(genome_counts_selection), offset=-0.4, width=0.8, colnames=TRUE, colnames_angle=90, font.size=3, colnames_position=&quot;top&quot;, colnames_offset_y = 15) + vexpand(.08) + coord_cartesian(clip = &quot;off&quot;) + scale_fill_gradient(low = &quot;lightblue&quot;, high = &quot;#315b7d&quot;, na.value=&quot;#f4f4f4&quot;) + new_scale_fill() vertical_tree + theme(legend.position=&#39;none&#39;) Top 10 diversity samples are sorted from left to right. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
